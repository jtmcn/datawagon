name: Build and Release

on:
    push:
      branches: [main]
    pull_request:
      branches: [main]

jobs:
  black-formatting-check:
      name: Check formatting
      runs-on: 'ubuntu-latest'
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        - uses: psf/black@stable
      
  flake8-linting:
    name: Linting
    runs-on: 'ubuntu-latest'
    needs: black-formatting-check    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - uses: py-actions/flake8@v2

  setup-build:
    name: Setup Build, Install poetry and dependencies

    runs-on: ${{ matrix.os }}
    needs: flake8-linting
    strategy:
      matrix:
        os:
          - 'ubuntu-latest'
          - 'macos-latest'
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          cache: 'poetry'
      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
      - name: Get Poetry version
        run: poetry --version
      - name: Check pyproject.toml validity
        run: poetry check --no-interaction
      - name: Install deps
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
      - name: Build artifacts
        run: poetry build -v          
      - name: Check for release
        if: startsWith(github.ref, 'refs/tags/')
        run: build-release
          

  create-release:
    name: Create Release
    runs-on: 'ubuntu-latest'
    steps:
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt        
    
  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                poetry run pyinstaller --onefile datawagon/main.py --name datawagon &&
                cd dist/ &&
                zip -r9 datawagon.zip datawagon             
            OUT_FILE_NAME: datawagon.zip
            ASSET_MIME: application/zip    
    steps:            
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value        
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}            